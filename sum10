import java.util.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

public class Main {
	public static void main(String args[]){
		double[] num = {6,7,6,8};
		int[] nums = {1, 2, 3, 4};
        ArrayList<ArrayList<Integer>> permutations = permute(nums);
        //System.out.println("All possible permutations:");
		for (ArrayList<Integer> permutation : permutations) {
        	for(int q1 = 0; q1 < 4; q1++){
        		for(int q2 = 0; q2 < 4; q2++){
        			for(int q3 = 0; q3 < 4; q3++){
        				String str = "";
        				double sum = num[permutation.get(0) - 1];
        				str += sum;
        				if(q1 == 0) {
        					sum += num[permutation.get(1) - 1];
        					str += "+";
        					str += num[permutation.get(1) - 1];
        				}
        				else if(q1 == 1){
        					sum -= num[permutation.get(1) - 1];
        					str += "-";
        					str += num[permutation.get(1) - 1];
        				}
        				else if(q1 == 2){
        					sum *= num[permutation.get(1) - 1];
        					str += "×";
        					str += num[permutation.get(1) - 1];
        				}
        				else if(q1 == 3){
        					sum /= num[permutation.get(1) - 1];
        					str += "÷";
        					str += num[permutation.get(1) - 1];
        				}
        				
        				if(q2 == 0) {
        					sum += num[permutation.get(2) - 1];
        					str += "+";
        					str += num[permutation.get(2) - 1];
        				}
        				else if(q2 == 1){
        					sum -= num[permutation.get(2) - 1];
        					str += "-";
        					str += num[permutation.get(2) - 1];
        				}
        				else if(q2 == 2){
        					sum *= num[permutation.get(2) - 1];
        					str += "×";
        					str += num[permutation.get(2) - 1];
        				}
        				else if(q2 == 3){
        					sum /= num[permutation.get(2) - 1];
        					str += "÷";
        					str += num[permutation.get(2) - 1];
        				}
        				
        				if(q3 == 0) {
        					sum += num[permutation.get(3) - 1];
        					str += "+";
        					str += num[permutation.get(3) - 1];
        				}
        				else if(q3 == 1){
        					sum -= num[permutation.get(3) - 1];
        					str += "-";
        					str += num[permutation.get(3) - 1];
        				}
        				else if(q3 == 2){
        					sum *= num[permutation.get(3) - 1];
        					str += "×";
        					str += num[permutation.get(3) - 1];
        				}
        				else if(q3 == 3){
        					sum /= num[permutation.get(3) - 1];
        					str += "÷";
        					str += num[permutation.get(3) - 1];
        				}
        				if(sum == 10){
        					System.out.println("※掛け算割り算も左側から順に行うものとする");
        					System.out.println("formula:" + str);
        					System.out.println("sum:" + sum);
        				}
        			}
        		}
        	}
        }
	}
	public static ArrayList<ArrayList<Integer>> permute(int[] nums) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        backtrack(result, new ArrayList<>(), nums);
        return result;
    }
    
    private static void backtrack(ArrayList<ArrayList<Integer>> result, ArrayList<Integer> tempList, int [] nums){
        if(tempList.size() == nums.length){
            result.add(new ArrayList<>(tempList));
        } else{
            for(int i = 0; i < nums.length; i++){ 
                if(tempList.contains(nums[i])) continue; // element already exists, skip
                tempList.add(nums[i]);
                backtrack(result, tempList, nums);
                tempList.remove(tempList.size() - 1);
            }
        }
    }	
}
